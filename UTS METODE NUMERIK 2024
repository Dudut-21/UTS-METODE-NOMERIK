import numpy as np
import matplotlib.pyplot as plt

# Diketahui
L = 0.5  # Henry
C = 10e-6  # Farad
fd = 1000  # Hz

# Fungsi untuk menghitung frekuensi f(R)
def f_R(R):
    discriminant = (1 / (L * C)) - (R**2 / (4 * L**2))
    if discriminant < 0:
        return np.nan  # Return NaN jika nilai diskriminan negatif (tidak ada solusi riil)
    return (1 / (2 * np.pi)) * np.sqrt(discriminant)

# Fungsi F(R) = f(R) - fd
def F_R(R):
    return f_R(R) - fd

# Check values of F_R at the endpoints
print("F_R(10):", F_R(10))
print("F_R(100):", F_R(100))

# Visualisasi F(R) untuk menemukan interval yang cocok
R_values = np.linspace(0, 200, 1000)
F_R_values = F_R(R_values)

plt.plot(R_values, F_R_values, label="F(R)")
plt.axhline(0, color='red', lw=0.5, linestyle='--')  # Garis horizontal di y=0
plt.xlabel('R value')
plt.ylabel('F(R)')
plt.title('Plot of F(R)')
plt.legend()
plt.grid(True)
plt.show()

# Implementasi metode biseksi
def bisection_method(func, a, b, tol=1e-6):
    if func(a) * func(b) > 0:
        raise ValueError("Fungsi tidak berubah tanda pada interval ini.")
    
    R_values_bisection = []
    while (b - a) / 2.0 > tol:
        mid = (a + b) / 2.0
        R_values_bisection.append(mid)
        if func(mid) == 0:
            return mid, R_values_bisection
        elif func(a) * func(mid) < 0:
            b = mid
        else:
            a = mid
    return mid, R_values_bisection

# Mencari nilai R menggunakan metode biseksi
R_bisection, R_values_bisection = bisection_method(F_R, 0, 200)

# Turunan dari F(R)
def dF_R(R):
    discriminant = (1 / (L * C)) - (R**2 / (4 * L**2))
    if discriminant <= 0:
        return np.nan
    return -(R / (2 * np.pi * L**2 * np.sqrt(discriminant)))

def newton_raphson(func, dfunc, x0, tol=1e-6, max_iter=100):
    x = x0
    R_values_newton = []
    for _ in range(max_iter):
        dfx = dfunc(x)
        if np.isnan(dfx) or dfx == 0:
            raise ValueError("Turunan tidak terdefinisi atau nol, metode gagal.")
        x_new = x - func(x) / dfx
        R_values_newton.append(x_new)
        if abs(x_new - x) < tol:
            return x_new, R_values_newton
        x = x_new
    raise ValueError("Metode Newton-Raphson gagal konvergen.")

# Mencari nilai R menggunakan metode Newton-Raphson
R_newton, R_values_newton = newton_raphson(F_R, dF_R, 50)

# Visualisasi konvergensi
def plot_convergence():
    plt.plot(R_values_bisection, label="Bisection Method")
    plt.plot(R_values_newton, label="Newton-Raphson Method")
    plt.xlabel('Iteration')
    plt.ylabel('R value')
    plt.title('Convergence Comparison')
    plt.legend()
    plt.grid(True)
    plt.show()

plot_convergence()

# Fungsi eliminasi Gauss
def gauss_elimination(A, B):
    n = len(B)
    for i in range(n):
        for j in range(i+1, n):
            ratio = A[j][i] / A[i][i]
            A[j, :] = A[j, :] - ratio * A[i, :]
            B[j] -= ratio * B[i]
    
    X = np.zeros(n)
    X[-1] = B[-1] / A[-1, -1]
    
    for i in range(n-2, -1, -1):
        X[i] = B[i] - np.dot(A[i, i+1:], X[i+1:])
        X[i] /= A[i, i]
    
    return X

# Sistem persamaan
A = np.array([[4, -1, -1], [-1, 3, -1], [-1, -1, 5]], dtype=float)
B = np.array([5, 3, 4], dtype=float)

# Penyelesaian dengan eliminasi Gauss
solutions = gauss_elimination(A, B)
print("Solusi sistem persamaan:", solutions)
